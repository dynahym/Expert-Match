import os
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt


def ensure_directory_exists(directory):
    """Ensure the specified directory exists, creating it if necessary."""
    if not os.path.exists(directory):
        os.makedirs(directory)


def save_plot(filename, func, *args, **kwargs):
    """
    Save a plot generated by a given function to a specified filename.

    Parameters:
        filename (str): The file path where the plot should be saved.
        func (function): The plotting function to generate the plot.
        *args: Variable arguments to pass to the plotting function.
        **kwargs: Keyword arguments to pass to the plotting function.
    """
    ensure_directory_exists(os.path.dirname(filename))
    plt.figure()
    func(*args, **kwargs)
    plt.savefig(filename)
    plt.close()


def plot_stats_year(stats, situation, color):
    """
    Plot statistics of doctoral students by year for a specific situation.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        situation (str): The situation to filter by (e.g., "Inscrit").
        color (str): The color for the bars in the plot.
    """
    stats.sort(key=lambda x: x["premiere_inscription__year"])
    filtered_stats = [stat for stat in stats if stat.get("situation") == situation]

    years = [stat["premiere_inscription__year"] for stat in filtered_stats]
    totals = [stat["total"] for stat in filtered_stats]

    plt.bar(years, totals, color=color)
    plt.xlabel("Année")
    plt.ylabel(f"Nombre de Doctorants {situation}")
    plt.title(f"Statistiques des Doctorants {situation} par Année")
    plt.xticks(years)
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_situation_year(stats, year):
    """
    Plot statistics of doctoral students for different situations in a specific year.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        year (int): The year to filter by.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]

    situations = ["Inscrit", "Soutenu", "Abandon"]
    totals = [
        sum(
            stat["total"] 
            for stat in stats_for_year 
            if stat["situation"] == situation
            )
        for situation in situations
    ]

    plt.bar(situations, totals, color=["blue", "green", "red"])
    plt.xlabel("Situation")
    plt.ylabel("Nombre de Doctorants")
    plt.title(f"Statistiques pour l'année {year}")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_sexe(stats):
    """
    Plot statistics of doctoral students by sex for all enrolled students.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
    """
    total_F = sum(stat["total"] for stat in stats if stat["sexe"] == "F")
    total_M = sum(stat["total"] for stat in stats if stat["sexe"] == "M")

    sexes = ["F", "M"]
    totals = [total_F, total_M]
    colors = ["pink", "blue"]

    plt.bar(sexes, totals, color=colors)
    plt.xlabel("Sexe")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title("Statistiques par Sexe (Inscrits seulement)")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_sexe_year(stats, year):
    """
    Plot statistics of doctoral students by sex for a specific year.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        year (int): The year to filter by.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]

    total_F = sum(stat["total"] for stat in stats_for_year if stat["sexe"] == "F")
    total_M = sum(stat["total"] for stat in stats_for_year if stat["sexe"] == "M")

    sexes = ["F", "M"]
    totals = [total_F, total_M]
    colors = ["pink", "blue"]

    plt.bar(sexes, totals, color=colors)
    plt.xlabel("Sexe")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title(f"Statistiques par Sexe pour l'année {year}")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_specialite(stats):
    """
    Plot statistics of doctoral students by specialty for all enrolled students.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
    """
    specialites = list(set(stat["specialite"] for stat in stats))
    totals = [
        sum(
            stat["total"] 
            for stat in stats 
            if stat["specialite"] == specialite
            )
        for specialite in specialites
    ]
    colors = ["blue", "orange", "green"]

    plt.bar(specialites, totals, color=colors)
    plt.xlabel("Spécialité")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title("Statistiques par Spécialité (Inscrits seulement)")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_specialite_year(stats, year):
    """
    Plot statistics of doctoral students by specialty for a specific year.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        year (int): The year to filter by.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]

    specialites = list(set(stat["specialite"] for stat in stats_for_year))
    totals = [
        sum(
            stat["total"] 
            for stat in stats_for_year 
            if stat["specialite"] == specialite
        )
        for specialite in specialites
    ]
    colors = ["blue", "orange", "green"]

    plt.bar(specialites, totals, color=colors)
    plt.xlabel("Spécialité")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title(f"Statistiques par Spécialité pour l'année {year}")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_type(stats):
    """
    Plot statistics of doctoral students by doctorate type for all enrolled students.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
    """
    types = list(set(stat["type_doctorat"] for stat in stats))
    totals = [
        sum(
            stat["total"] 
            for stat in stats 
            if stat["type_doctorat"] == type_doctorat
        )
        for type_doctorat in types
    ]
    colors = ["purple", "green"]

    plt.bar(types, totals, color=colors)
    plt.xlabel("Type de Doctorat")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title("Statistiques par Type (Inscrits seulement)")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_type_year(stats, year):
    """
    Plot statistics of doctoral students by doctorate type for a specific year.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        year (int): The year to filter by.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]

    types = list(set(stat["type_doctorat"] for stat in stats_for_year))
    totals = [
        sum(
            stat["total"]
            for stat in stats_for_year
            if stat["type_doctorat"] == type_doctorat
        )
        for type_doctorat in types
    ]
    colors = ["purple", "green"]

    plt.bar(types, totals, color=colors)
    plt.xlabel("Type de Doctorat")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title(f"Statistiques par Type pour l'année {year}")
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_laboratoire(stats):
    """
    Plot statistics of doctoral students by laboratory for all enrolled students.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
    """
    lab_names = list(set([stat["laboratoires__nom"] for stat in stats]))
    lab_totals = {name: 0 for name in lab_names}

    for stat in stats:
        lab_totals[stat["laboratoires__nom"]] += stat["total"]

    sorted_labs = sorted(lab_totals.items(), key=lambda x: x[0], reverse=True)
    names, totals = zip(*sorted_labs)

    plt.bar(names, totals)
    plt.xlabel("Laboratoire")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title("Statistiques par Laboratoire (Inscrits seulement)")
    plt.xticks(rotation=45)
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_laboratoire_year(stats, year):
    """
    Plot statistics of doctoral students by laboratory for a specific year.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        year (int): The year to filter by.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]

    lab_names = list(set([stat["laboratoires__nom"] for stat in stats_for_year]))
    lab_totals = {name: 0 for name in lab_names}

    for stat in stats_for_year:
        lab_totals[stat["laboratoires__nom"]] += stat["total"]

    sorted_labs = sorted(lab_totals.items(), key=lambda x: x[0], reverse=True)
    names, totals = zip(*sorted_labs)

    plt.bar(names, totals)
    plt.xlabel("Laboratoire")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title(f"Statistiques par Laboratoire pour l'année {year}")
    plt.xticks(rotation=45)
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_annee_etude(stats):
    """
    Plot statistics of doctoral students by study year for all enrolled students.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
    """
    max_annee = max(stat["annee_etude"] for stat in stats)
    annees = list(range(1, max_annee + 1))

    totals = [
        sum(stat["total"] for stat in stats if stat["annee_etude"] == annee)
        for annee in annees
    ]

    plt.bar(annees, totals, color="blue")
    plt.xlabel("Année")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title("Statistiques par Année (Inscrits seulement)")
    plt.xticks(annees)
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))


def plot_stats_annee_etude_year(stats, year):
    """
    Plot statistics of doctoral students by study year for a specific year.

    Parameters:
        stats (list of dict): A list of dictionaries containing statistics.
        year (int): The year to filter by.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]

    max_annee = max(stat["annee_etude"] for stat in stats_for_year)
    annees = list(range(1, max_annee + 1))

    totals = [
        sum(stat["total"] for stat in stats_for_year if stat["annee_etude"] == annee)
        for annee in annees
    ]

    plt.bar(annees, totals, color="blue")
    plt.xlabel("Année")
    plt.ylabel("Nombre de Doctorants Inscrits")
    plt.title(f"Statistiques par Année d'étude pour l'année {year}")
    plt.xticks(annees)
    plt.grid(axis="y")
    plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))

def plot_stats_evaluation(stats, year):
    """
    Plot the statistics of doctorant evaluations for a given year.

    Parameters:
        stats (list): List of dictionaries containing evaluation statistics (admitted, not admitted, year).
        year (int): The year for which the stats are plotted.
    """
    stats_for_year = [
        stat for stat in stats if stat["premiere_inscription__year"] == year
    ]
    
    if stats_for_year:
        stats_for_year = stats_for_year[0]
        
        labels = ['Admis', 'Non Admis']
        totals = [stats_for_year['admis'], stats_for_year['non_admis']]

        plt.bar(labels, totals)
        plt.title(f"Évaluations pour l'année {year}")
        plt.ylabel('Nombre de doctorants')
        plt.xlabel('Statut')
        plt.xticks(labels)
        plt.grid(axis="y")
        plt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))
